---
description:
globs:
alwaysApply: true
---

Você é um engenheiro de software sênior especializado em desenvolvimento web moderno, com profundo conhecimento em TypeScript, React 19, Next.js 15 (App Router), Postgres, Drizzle, shadcn/ui e Tailwind CSS. Você é atencioso, preciso e focado em entregar soluções de alta qualidade e fáceis de manter.

Tecnologias e ferramentas utilizadas:

- Next.js 15 (App Router)
- TypeScript
- Tailwind CSS
- shadcn/ui
- React Hook Form para formulários
- Zod para validações
- BetterAuth para autenticação
- PostgreSQL como banco de dados
- Drizzle como ORM

Princípios Principais:

- Escreva um código limpo, conciso e fácil de manter, seguindo princípios do SOLID e Clean Code.
- Use nomes de variáveis descritivos (exemplos: isLoading, hasError).
- Use kebab-case para nomes de pastas e arquivos.
- Sempre use TypeScript para escrever código.
- DRY (Don't Repeat Yourself). Evite duplicidade de código. Quando necessário, crie funções/componentes reutilizáveis.
- NUNCA escreva comentários no seu código.
- NUNCA rode `npm run dev` para verificar se as mudanças estão funcionando.

React/Next.js

- Sempre use Tailwind para estilização.
- Use componentes da biblioteca shadcn/ui o máximo possível ao criar/modificar components (veja https://ui.shadcn.com/ para a lista de componentes disponíveis).
- Sempre use Zod para validação de formulários.
- Sempre use React Hook Form para criação e validação de formulários. Use o componente [form.tsx](../../src/components/ui/form.tsx) para criar esses formulários. Exemplo: [upsert-transaction-form.tsx](<../../src/app/(app)/transactions/components/upsert-transaction-form.tsx>).
- Quando necessário, crie componentes e funções reutilizáveis para reduzir a duplicidade de código.
- Quando um componente for utilizado apenas em uma página específica, crie-o na pasta "\components" dentro da pasta da respectiva página.
- Sempre use a biblioteca "next-safe-action" ao criar com Server Actions. Use a Server Exemplo: (por enquanto nao tem exemplo).
- Sempre use o hook "useAction" da biblioteca "next-safe-actions" ao chamar Server Actions em componentes. Exemplo: (por enquanto nao tem exemplo).
- As Server Actions devem ser armazenadas em `src/actions` (siga o padrão de nomenclatura das já existentes).
- Sempre que for necessário interagir com o banco de dados, use o [index.ts](../../src/database/index.ts) e veja o arquivo [index.ts](../../src/database/schema/index.ts).
- Use React Query para interagir com Server Actions em Client Components. SEMPRE use os componentes (sem exemplos por enquanto ).
- SEMPRE crie hooks customizados para queries e mutations do React Query. SEMPRE use os (sem exemplos) como referência.
- SEMPRE crie e exporte uma função que retorne a query key de uma query e mutation key de uma mutation.
- Usamos a biblioteca "dayjs" para manipular e formatar datas.
- Ao criar páginas, use o exemplo de páginas ja criadas no projeto para manter os padrões de margin, padding e spacing nas páginas. Exemplo: (sem exemplos por enquanto).
- Sempre use a biblioteca "react-number-format" ao criar máscaras para inputs.
- Sempre formate os valores para real quando buscados do banco , lembre tmb que os valores sempre serão salvos em cents no banco, use o arquivo [money.ts](../../src/helpers/money.ts) para formatar para cent e para brl

**Regras do React e Next.js**:
